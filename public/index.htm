<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PeerJS Example</title>
    <script src="https://unpkg.com/peerjs@1.5.4/dist/peerjs.min.js"></script>
    <link rel="stylesheet" href="index.css">
</head>

<body>

    <h2>Local Stream</h2>
    <div id="video-container">
        <video id="localVideo" autoplay muted></video>
    </div>
    <footer>
        <div class="record">
            <button id="stop-video-btn">Stop Video</button>
            <button id="start-video-btn">Start Video</button>
        </div>
        <div class="audio">
            <button id="stop-audio-btn">Mute Audio</button>
            <button id="start-audio-btn">Unmute Audio</button>
        </div>
    </footer>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const peer = new Peer();
        let peerIds = new Set(); // Store peer IDs
        let localStream; // Reference to the local media stream
        const remoteStreams = {}; // Store remote streams by peer ID

        peer.on('open', function (id) {
            console.log('My peer ID is: ' + id);
            socket.emit("id-got", id); // Send peer ID to the server
        });

        socket.on("id", (anotherPeerId) => {
            if (!peerIds.has(anotherPeerId)) {
                peerIds.add(anotherPeerId);
                connectToPeer(anotherPeerId);
            }
        });

        function connectToPeer(anotherPeerId) {
            navigator.mediaDevices.getUserMedia({ video: true, audio: true })
                .then(function (stream) {
                    localStream = stream;
                    document.getElementById('localVideo').srcObject = stream;

                    const call = peer.call(anotherPeerId, stream);
                    const videoContainer = document.getElementById('video-container');

                    const videoElement = document.createElement('video');
                    videoElement.setAttribute("id", "remoteVideo_" + anotherPeerId);
                    videoElement.className = "userVideo";
                    videoElement.autoplay = true;
                    videoContainer.appendChild(videoElement);

                    call.on('stream', function (remoteStream) {
                        remoteStreams[anotherPeerId] = remoteStream;
                        document.getElementById('remoteVideo_' + anotherPeerId).srcObject = remoteStream;
                    });
                })
                .catch(function (err) {
                    console.error('Failed to get local stream', err);
                });
        }

        peer.on('call', function (call) {
            navigator.mediaDevices.getUserMedia({ video: true, audio: true })
                .then(function (stream) {
                    localStream = stream;
                    call.answer(stream);
                    document.getElementById('localVideo').srcObject = stream;

                    const videoContainer = document.getElementById('video-container');

                    const videoElement = document.createElement('video');
                    const remotePeerId = call.peer;
                    videoElement.setAttribute("id", "remoteVideo_" + remotePeerId);
                    videoElement.autoplay = true;
                    videoElement.style.width = '30%';
                    videoElement.style.border = '1px solid black';
                    videoElement.style.margin = '5px';
                    videoContainer.appendChild(videoElement);

                    call.on('stream', function (remoteStream) {
                        remoteStreams[remotePeerId] = remoteStream;
                        document.getElementById('remoteVideo_' + remotePeerId).srcObject = remoteStream;
                    });
                })
                .catch(function (err) {
                    console.error('Failed to get local stream', err);
                });
        });

        socket.on("user-disconnected", (peerId) => {
            if (peerIds.has(peerId)) {
                const videoElement = document.getElementById('remoteVideo_' + peerId);
                if (videoElement) videoElement.remove();
                peerIds.delete(peerId);
                delete remoteStreams[peerId];
            }
        });

        // Video control
        document.getElementById('stop-video-btn').addEventListener('click', () => {
            if (localStream) {
                const videoTrack = localStream.getVideoTracks()[0];
                if (videoTrack) videoTrack.enabled = false;
                console.log("Video stopped");
            }
        });

        document.getElementById('start-video-btn').addEventListener('click', () => {
            if (localStream) {
                const videoTrack = localStream.getVideoTracks()[0];
                if (videoTrack) videoTrack.enabled = true;
                console.log("Video started");
            }
        });

        // Audio control
        document.getElementById('stop-audio-btn').addEventListener('click', () => {
            if (localStream) {
                const audioTrack = localStream.getAudioTracks()[0];
                if (audioTrack) audioTrack.enabled = false;
                console.log("Audio muted");
            }
        });

        document.getElementById('start-audio-btn').addEventListener('click', () => {
            if (localStream) {
                const audioTrack = localStream.getAudioTracks()[0];
                if (audioTrack) audioTrack.enabled = true;
                console.log("Audio unmuted");
            }
        });
    </script>

</body>

</html>
